// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class ArtistAddedNFTs extends ethereum.Event {
  get params(): ArtistAddedNFTs__Params {
    return new ArtistAddedNFTs__Params(this);
  }
}

export class ArtistAddedNFTs__Params {
  _event: ArtistAddedNFTs;

  constructor(event: ArtistAddedNFTs) {
    this._event = event;
  }

  get artist(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get nfts(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get chainid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class CanceledSubcription extends ethereum.Event {
  get params(): CanceledSubcription__Params {
    return new CanceledSubcription__Params(this);
  }
}

export class CanceledSubcription__Params {
  _event: CanceledSubcription;

  constructor(event: CanceledSubcription) {
    this._event = event;
  }

  get subcriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get artist(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get chainid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class ListedMusicNFT extends ethereum.Event {
  get params(): ListedMusicNFT__Params {
    return new ListedMusicNFT__Params(this);
  }
}

export class ListedMusicNFT__Params {
  _event: ListedMusicNFT;

  constructor(event: ListedMusicNFT) {
    this._event = event;
  }

  get nft(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get artist(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get chainid(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class SubcribedToArtist extends ethereum.Event {
  get params(): SubcribedToArtist__Params {
    return new SubcribedToArtist__Params(this);
  }
}

export class SubcribedToArtist__Params {
  _event: SubcribedToArtist;

  constructor(event: SubcribedToArtist) {
    this._event = event;
  }

  get subcriber(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get artist(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get chainid(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Contract__checkUpkeepResult {
  value0: boolean;
  value1: Bytes;

  constructor(value0: boolean, value1: Bytes) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromBoolean(this.value0));
    map.set("value1", ethereum.Value.fromBytes(this.value1));
    return map;
  }

  getUpkeepNeeded(): boolean {
    return this.value0;
  }

  getValue1(): Bytes {
    return this.value1;
  }
}

export class Contract__getAnalyticsResultValue0Struct extends ethereum.Tuple {
  get lastPaymentTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get currentlySubcribed(): boolean {
    return this[1].toBoolean();
  }

  get artist(): Address {
    return this[2].toAddress();
  }

  get subcriber(): Address {
    return this[3].toAddress();
  }

  get subcribedDate(): BigInt {
    return this[4].toBigInt();
  }
}

export class Contract__getArtistResultValue0Struct extends ethereum.Tuple {
  get artistAddress(): Address {
    return this[0].toAddress();
  }

  get tokenIds(): Array<BigInt> {
    return this[1].toBigIntArray();
  }

  get allSubcribers(): Array<Address> {
    return this[2].toAddressArray();
  }

  get nfts(): Array<string> {
    return this[3].toStringArray();
  }
}

export class Contract__getMusicResultValue0Struct extends ethereum.Tuple {
  get nft(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get streams(): BigInt {
    return this[2].toBigInt();
  }

  get artist(): Address {
    return this[3].toAddress();
  }
}

export class Contract__getMusicNFTResultValue0Struct extends ethereum.Tuple {
  get nft(): Address {
    return this[0].toAddress();
  }

  get tokenId(): BigInt {
    return this[1].toBigInt();
  }

  get artist(): Address {
    return this[2].toAddress();
  }
}

export class Contract__getSubcribersResultValue0Struct extends ethereum.Tuple {
  get lastPaymentTimestamp(): BigInt {
    return this[0].toBigInt();
  }

  get currentlySubcribed(): boolean {
    return this[1].toBoolean();
  }

  get artist(): Address {
    return this[2].toAddress();
  }

  get subcriber(): Address {
    return this[3].toAddress();
  }

  get subcribedDate(): BigInt {
    return this[4].toBigInt();
  }
}

export class Contract__getUserResultValue0Struct extends ethereum.Tuple {
  get userAddress(): Address {
    return this[0].toAddress();
  }

  get subcribeToAddress(): Array<Address> {
    return this[1].toAddressArray();
  }
}

export class Contract extends ethereum.SmartContract {
  static bind(address: Address): Contract {
    return new Contract("Contract", address);
  }

  _tokenId(user: Address, artist: Address): BigInt {
    let result = super.call("_tokenId", "_tokenId(address,address):(uint256)", [
      ethereum.Value.fromAddress(user),
      ethereum.Value.fromAddress(artist)
    ]);

    return result[0].toBigInt();
  }

  try__tokenId(user: Address, artist: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "_tokenId",
      "_tokenId(address,address):(uint256)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(artist)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkIfUserIsSubcribed(
    subcriberAddress: Address,
    artistAddress: Address
  ): boolean {
    let result = super.call(
      "checkIfUserIsSubcribed",
      "checkIfUserIsSubcribed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(subcriberAddress),
        ethereum.Value.fromAddress(artistAddress)
      ]
    );

    return result[0].toBoolean();
  }

  try_checkIfUserIsSubcribed(
    subcriberAddress: Address,
    artistAddress: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "checkIfUserIsSubcribed",
      "checkIfUserIsSubcribed(address,address):(bool)",
      [
        ethereum.Value.fromAddress(subcriberAddress),
        ethereum.Value.fromAddress(artistAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  checkUpkeep(param0: Bytes): Contract__checkUpkeepResult {
    let result = super.call("checkUpkeep", "checkUpkeep(bytes):(bool,bytes)", [
      ethereum.Value.fromBytes(param0)
    ]);

    return new Contract__checkUpkeepResult(
      result[0].toBoolean(),
      result[1].toBytes()
    );
  }

  try_checkUpkeep(
    param0: Bytes
  ): ethereum.CallResult<Contract__checkUpkeepResult> {
    let result = super.tryCall(
      "checkUpkeep",
      "checkUpkeep(bytes):(bool,bytes)",
      [ethereum.Value.fromBytes(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new Contract__checkUpkeepResult(value[0].toBoolean(), value[1].toBytes())
    );
  }

  getAllArtists(): Array<Address> {
    let result = super.call("getAllArtists", "getAllArtists():(address[])", []);

    return result[0].toAddressArray();
  }

  try_getAllArtists(): ethereum.CallResult<Array<Address>> {
    let result = super.tryCall(
      "getAllArtists",
      "getAllArtists():(address[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddressArray());
  }

  getAnalytics(
    subcriberAddress: Address,
    artistAddress: Address
  ): Contract__getAnalyticsResultValue0Struct {
    let result = super.call(
      "getAnalytics",
      "getAnalytics(address,address):((uint256,bool,address,address,uint256))",
      [
        ethereum.Value.fromAddress(subcriberAddress),
        ethereum.Value.fromAddress(artistAddress)
      ]
    );

    return changetype<Contract__getAnalyticsResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getAnalytics(
    subcriberAddress: Address,
    artistAddress: Address
  ): ethereum.CallResult<Contract__getAnalyticsResultValue0Struct> {
    let result = super.tryCall(
      "getAnalytics",
      "getAnalytics(address,address):((uint256,bool,address,address,uint256))",
      [
        ethereum.Value.fromAddress(subcriberAddress),
        ethereum.Value.fromAddress(artistAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getAnalyticsResultValue0Struct>(value[0].toTuple())
    );
  }

  getArtist(_artistAddr: Address): Contract__getArtistResultValue0Struct {
    let result = super.call(
      "getArtist",
      "getArtist(address):((address,uint256[],address[],string[]))",
      [ethereum.Value.fromAddress(_artistAddr)]
    );

    return changetype<Contract__getArtistResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getArtist(
    _artistAddr: Address
  ): ethereum.CallResult<Contract__getArtistResultValue0Struct> {
    let result = super.tryCall(
      "getArtist",
      "getArtist(address):((address,uint256[],address[],string[]))",
      [ethereum.Value.fromAddress(_artistAddr)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getArtistResultValue0Struct>(value[0].toTuple())
    );
  }

  getChainlinkDataFeedLatestAnswer(): BigInt {
    let result = super.call(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer():(int256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getChainlinkDataFeedLatestAnswer(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getChainlinkDataFeedLatestAnswer",
      "getChainlinkDataFeedLatestAnswer():(int256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMusic(tokenId: BigInt): Contract__getMusicResultValue0Struct {
    let result = super.call(
      "getMusic",
      "getMusic(uint256):((address,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<Contract__getMusicResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMusic(
    tokenId: BigInt
  ): ethereum.CallResult<Contract__getMusicResultValue0Struct> {
    let result = super.tryCall(
      "getMusic",
      "getMusic(uint256):((address,uint256,uint256,address))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getMusicResultValue0Struct>(value[0].toTuple())
    );
  }

  getMusicNFT(
    tokenId: BigInt,
    _artistAddr: Address
  ): Contract__getMusicNFTResultValue0Struct {
    let result = super.call(
      "getMusicNFT",
      "getMusicNFT(uint256,address):((address,uint256,address))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(_artistAddr)
      ]
    );

    return changetype<Contract__getMusicNFTResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMusicNFT(
    tokenId: BigInt,
    _artistAddr: Address
  ): ethereum.CallResult<Contract__getMusicNFTResultValue0Struct> {
    let result = super.tryCall(
      "getMusicNFT",
      "getMusicNFT(uint256,address):((address,uint256,address))",
      [
        ethereum.Value.fromUnsignedBigInt(tokenId),
        ethereum.Value.fromAddress(_artistAddr)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getMusicNFTResultValue0Struct>(value[0].toTuple())
    );
  }

  getSubcribers(): Array<Contract__getSubcribersResultValue0Struct> {
    let result = super.call(
      "getSubcribers",
      "getSubcribers():((uint256,bool,address,address,uint256)[])",
      []
    );

    return result[0].toTupleArray<Contract__getSubcribersResultValue0Struct>();
  }

  try_getSubcribers(): ethereum.CallResult<
    Array<Contract__getSubcribersResultValue0Struct>
  > {
    let result = super.tryCall(
      "getSubcribers",
      "getSubcribers():((uint256,bool,address,address,uint256)[])",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      value[0].toTupleArray<Contract__getSubcribersResultValue0Struct>()
    );
  }

  getTokenId(subcriberAddress: Address, artistAddress: Address): BigInt {
    let result = super.call(
      "getTokenId",
      "getTokenId(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(subcriberAddress),
        ethereum.Value.fromAddress(artistAddress)
      ]
    );

    return result[0].toBigInt();
  }

  try_getTokenId(
    subcriberAddress: Address,
    artistAddress: Address
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getTokenId",
      "getTokenId(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(subcriberAddress),
        ethereum.Value.fromAddress(artistAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getUser(_userAddress: Address): Contract__getUserResultValue0Struct {
    let result = super.call(
      "getUser",
      "getUser(address):((address,address[]))",
      [ethereum.Value.fromAddress(_userAddress)]
    );

    return changetype<Contract__getUserResultValue0Struct>(result[0].toTuple());
  }

  try_getUser(
    _userAddress: Address
  ): ethereum.CallResult<Contract__getUserResultValue0Struct> {
    let result = super.tryCall(
      "getUser",
      "getUser(address):((address,address[]))",
      [ethereum.Value.fromAddress(_userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<Contract__getUserResultValue0Struct>(value[0].toTuple())
    );
  }

  getUserBalance(_userAddress: Address): BigInt {
    let result = super.call(
      "getUserBalance",
      "getUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_userAddress)]
    );

    return result[0].toBigInt();
  }

  try_getUserBalance(_userAddress: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getUserBalance",
      "getUserBalance(address):(uint256)",
      [ethereum.Value.fromAddress(_userAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  isSubscribed(user: Address, artist: Address): boolean {
    let result = super.call(
      "isSubscribed",
      "isSubscribed(address,address):(bool)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(artist)]
    );

    return result[0].toBoolean();
  }

  try_isSubscribed(
    user: Address,
    artist: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isSubscribed",
      "isSubscribed(address,address):(bool)",
      [ethereum.Value.fromAddress(user), ethereum.Value.fromAddress(artist)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  isWalletAnArtist(artistAddress: Address): boolean {
    let result = super.call(
      "isWalletAnArtist",
      "isWalletAnArtist(address):(bool)",
      [ethereum.Value.fromAddress(artistAddress)]
    );

    return result[0].toBoolean();
  }

  try_isWalletAnArtist(artistAddress: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "isWalletAnArtist",
      "isWalletAnArtist(address):(bool)",
      [ethereum.Value.fromAddress(artistAddress)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastTimeStamp(): BigInt {
    let result = super.call("lastTimeStamp", "lastTimeStamp():(uint256)", []);

    return result[0].toBigInt();
  }

  try_lastTimeStamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastTimeStamp",
      "lastTimeStamp():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  monthlySubcriptionBool(
    year: BigInt,
    user: Address,
    artist: Address
  ): boolean {
    let result = super.call(
      "monthlySubcriptionBool",
      "monthlySubcriptionBool(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(year),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(artist)
      ]
    );

    return result[0].toBoolean();
  }

  try_monthlySubcriptionBool(
    year: BigInt,
    user: Address,
    artist: Address
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "monthlySubcriptionBool",
      "monthlySubcriptionBool(uint256,address,address):(bool)",
      [
        ethereum.Value.fromUnsignedBigInt(year),
        ethereum.Value.fromAddress(user),
        ethereum.Value.fromAddress(artist)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AddNFTForArtistCall extends ethereum.Call {
  get inputs(): AddNFTForArtistCall__Inputs {
    return new AddNFTForArtistCall__Inputs(this);
  }

  get outputs(): AddNFTForArtistCall__Outputs {
    return new AddNFTForArtistCall__Outputs(this);
  }
}

export class AddNFTForArtistCall__Inputs {
  _call: AddNFTForArtistCall;

  constructor(call: AddNFTForArtistCall) {
    this._call = call;
  }

  get _artistAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get nfts(): Array<string> {
    return this._call.inputValues[1].value.toStringArray();
  }
}

export class AddNFTForArtistCall__Outputs {
  _call: AddNFTForArtistCall;

  constructor(call: AddNFTForArtistCall) {
    this._call = call;
  }
}

export class CancelSubcribtionCall extends ethereum.Call {
  get inputs(): CancelSubcribtionCall__Inputs {
    return new CancelSubcribtionCall__Inputs(this);
  }

  get outputs(): CancelSubcribtionCall__Outputs {
    return new CancelSubcribtionCall__Outputs(this);
  }
}

export class CancelSubcribtionCall__Inputs {
  _call: CancelSubcribtionCall;

  constructor(call: CancelSubcribtionCall) {
    this._call = call;
  }

  get _artistAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class CancelSubcribtionCall__Outputs {
  _call: CancelSubcribtionCall;

  constructor(call: CancelSubcribtionCall) {
    this._call = call;
  }
}

export class CheckUpkeepCall extends ethereum.Call {
  get inputs(): CheckUpkeepCall__Inputs {
    return new CheckUpkeepCall__Inputs(this);
  }

  get outputs(): CheckUpkeepCall__Outputs {
    return new CheckUpkeepCall__Outputs(this);
  }
}

export class CheckUpkeepCall__Inputs {
  _call: CheckUpkeepCall;

  constructor(call: CheckUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class CheckUpkeepCall__Outputs {
  _call: CheckUpkeepCall;

  constructor(call: CheckUpkeepCall) {
    this._call = call;
  }

  get upkeepNeeded(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }

  get value1(): Bytes {
    return this._call.outputValues[1].value.toBytes();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class ListNFTCall extends ethereum.Call {
  get inputs(): ListNFTCall__Inputs {
    return new ListNFTCall__Inputs(this);
  }

  get outputs(): ListNFTCall__Outputs {
    return new ListNFTCall__Outputs(this);
  }
}

export class ListNFTCall__Inputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }

  get _nft(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get _artistAddr(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class ListNFTCall__Outputs {
  _call: ListNFTCall;

  constructor(call: ListNFTCall) {
    this._call = call;
  }
}

export class PerformUpkeepCall extends ethereum.Call {
  get inputs(): PerformUpkeepCall__Inputs {
    return new PerformUpkeepCall__Inputs(this);
  }

  get outputs(): PerformUpkeepCall__Outputs {
    return new PerformUpkeepCall__Outputs(this);
  }
}

export class PerformUpkeepCall__Inputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }

  get value0(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }
}

export class PerformUpkeepCall__Outputs {
  _call: PerformUpkeepCall;

  constructor(call: PerformUpkeepCall) {
    this._call = call;
  }
}

export class SetTokenIdCall extends ethereum.Call {
  get inputs(): SetTokenIdCall__Inputs {
    return new SetTokenIdCall__Inputs(this);
  }

  get outputs(): SetTokenIdCall__Outputs {
    return new SetTokenIdCall__Outputs(this);
  }
}

export class SetTokenIdCall__Inputs {
  _call: SetTokenIdCall;

  constructor(call: SetTokenIdCall) {
    this._call = call;
  }

  get subcriberAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get artistAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get tokenId(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get _nftAddress(): Address {
    return this._call.inputValues[3].value.toAddress();
  }
}

export class SetTokenIdCall__Outputs {
  _call: SetTokenIdCall;

  constructor(call: SetTokenIdCall) {
    this._call = call;
  }
}

export class SubcribeToArtistCall extends ethereum.Call {
  get inputs(): SubcribeToArtistCall__Inputs {
    return new SubcribeToArtistCall__Inputs(this);
  }

  get outputs(): SubcribeToArtistCall__Outputs {
    return new SubcribeToArtistCall__Outputs(this);
  }
}

export class SubcribeToArtistCall__Inputs {
  _call: SubcribeToArtistCall;

  constructor(call: SubcribeToArtistCall) {
    this._call = call;
  }

  get _artistAddr(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SubcribeToArtistCall__Outputs {
  _call: SubcribeToArtistCall;

  constructor(call: SubcribeToArtistCall) {
    this._call = call;
  }
}
